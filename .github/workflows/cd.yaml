name: Continuous Deployment

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      IMAGE_NAME: as3305100/task-manager
      IMAGE_TAG: build-${{github.sha}}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Update compose yaml file
        uses: fjogeleit/yaml-update-action@v0.16.1
        with:
          valueFile: compose.yaml
          propertyPath: 'services["task-manager-server"].image'
          value: ${{env.IMAGE_NAME }}:${{ env.IMAGE_TAG}}
          commitChange: false
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{secrets.APP_ID}}
          private_key: ${{secrets.APP_SECRET_KEY}}
      - name: Commit files
        run: |
          git config --local user.name "Anurag Sahu"
          git config --local user.email as3305100@gmail.com
          git add .
          git commit -m "bump the image version ${{env.IMAGE_TAG}} [skip ci]" || echo "No changes to commit"
      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{steps.generate_token.outputs.token}}
      - name: Build docker image
        run: docker build -t ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} --platform linux/amd64 .
      - name: Login into docker hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
      - name: Push docker image to Docker Hub
        run: docker push ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

  deploy:
    name: Deploy the image to Docker Swarm Cluster
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: as3305100/task-manager
      IMAGE_TAG: build-${{github.sha}}
    needs:
      - build-and-push
    steps:
      - name: SSH into the server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{secrets.SWARM_MANAGER_HOST}}
          username: ${{secrets.SWARM_HOST_USERNAME}}
          key: ${{secrets.SWARM_HOST_SSH_KEY}}
          port: ${{secrets.SWARM_HOST_SSH_PORT}}
          script: |
            set -e

            if [ ! -d ~/taskManager/.git ]; then
              rm -rf ~/taskManager
              git clone https://github.com/anuragsahu-dev/project-management.git ~/taskManager
            fi

            cd ~/taskManager

            git fetch origin main
            git checkout main
            git pull origin main

            sudo docker pull ${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}
            sudo docker stack deploy -c compose.yaml taskManager

            # Wait for service to stabilize
            echo "Checking service health..."

            SERVICE_NAME="taskManager_task-manager-server"
            DESIRED=$(sudo docker service ls --format '{{.Name}} {{.Replicas}}' | grep $SERVICE_NAME | awk '{print $2}' | cut -d'/' -f2)

            echo "Waiting for $SERVICE_NAME to reach $DESIRED/$DESIRED replicas..."

            for i in {1..60}; do
              CURRENT=$(sudo docker service ls --format '{{.Name}} {{.Replicas}}' | grep $SERVICE_NAME | awk '{print $2}' | cut -d'/' -f1)
              if [[ "$CURRENT" == "$DESIRED" ]]; then
                echo "$SERVICE_NAME is stable with $CURRENT/$DESIRED replicas"
                break
              fi
              echo "Still waiting... $CURRENT/$DESIRED replicas"
              sleep 5
            done

            if [[ "$CURRENT" != "$DESIRED" ]]; then
              echo "Deployment failed: Not all replicas are running."
              exit 1
            fi

            echo "Deployment successful! Stack is running the latest version."

            # Optional: Cleanup dangling images and volumes AFTER success
            sudo docker system prune -af || true
            sudo docker volume prune -f || true
